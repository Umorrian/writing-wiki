// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: query.sql

package sqlite_gen

import (
	"context"
)

const createArticle = `-- name: CreateArticle :one
INSERT INTO articles (
name, content
) VALUES (?, ?)
RETURNING id, name, content
`

type CreateArticleParams struct {
	Name    string
	Content string
}

func (q *Queries) CreateArticle(ctx context.Context, arg CreateArticleParams) (Article, error) {
	row := q.db.QueryRowContext(ctx, createArticle, arg.Name, arg.Content)
	var i Article
	err := row.Scan(&i.ID, &i.Name, &i.Content)
	return i, err
}

const deleteArticle = `-- name: DeleteArticle :exec
DELETE FROM articles
WHERE id = ?
`

func (q *Queries) DeleteArticle(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteArticle, id)
	return err
}

const getAllArticles = `-- name: GetAllArticles :many
SELECT id, name, content FROM articles
`

func (q *Queries) GetAllArticles(ctx context.Context) ([]Article, error) {
	rows, err := q.db.QueryContext(ctx, getAllArticles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Article
	for rows.Next() {
		var i Article
		if err := rows.Scan(&i.ID, &i.Name, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getArticle = `-- name: GetArticle :one
SELECT id, name, content FROM articles
WHERE id = ? LIMIT 1
`

func (q *Queries) GetArticle(ctx context.Context, id int64) (Article, error) {
	row := q.db.QueryRowContext(ctx, getArticle, id)
	var i Article
	err := row.Scan(&i.ID, &i.Name, &i.Content)
	return i, err
}

const getArticleByName = `-- name: GetArticleByName :one
SELECT id, name, content FROM articles
WHERE name = ? LIMIT 1
`

func (q *Queries) GetArticleByName(ctx context.Context, name string) (Article, error) {
	row := q.db.QueryRowContext(ctx, getArticleByName, name)
	var i Article
	err := row.Scan(&i.ID, &i.Name, &i.Content)
	return i, err
}

const updateArticle = `-- name: UpdateArticle :exec
UPDATE articles
set name = ?,
    content = ?
WHERE id = ?
`

type UpdateArticleParams struct {
	Name    string
	Content string
	ID      int64
}

func (q *Queries) UpdateArticle(ctx context.Context, arg UpdateArticleParams) error {
	_, err := q.db.ExecContext(ctx, updateArticle, arg.Name, arg.Content, arg.ID)
	return err
}
