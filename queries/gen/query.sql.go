// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: query.sql

package gen

import (
	"context"
)

const deleteArticle = `-- name: DeleteArticle :exec
DELETE FROM articles
WHERE id = ?
`

func (q *Queries) DeleteArticle(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteArticle, id)
	return err
}

const insertArticle = `-- name: InsertArticle :one
INSERT INTO articles (
name, content
) VALUES (?, ?)
RETURNING id, name, content
`

type InsertArticleParams struct {
	Name    string
	Content string
}

func (q *Queries) InsertArticle(ctx context.Context, arg InsertArticleParams) (Article, error) {
	row := q.db.QueryRowContext(ctx, insertArticle, arg.Name, arg.Content)
	var i Article
	err := row.Scan(&i.ID, &i.Name, &i.Content)
	return i, err
}

const selectAllArticles = `-- name: SelectAllArticles :many
SELECT id, name, content FROM articles
`

func (q *Queries) SelectAllArticles(ctx context.Context) ([]Article, error) {
	rows, err := q.db.QueryContext(ctx, selectAllArticles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Article
	for rows.Next() {
		var i Article
		if err := rows.Scan(&i.ID, &i.Name, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectArticle = `-- name: SelectArticle :one
SELECT id, name, content FROM articles
WHERE id = ? LIMIT 1
`

func (q *Queries) SelectArticle(ctx context.Context, id int64) (Article, error) {
	row := q.db.QueryRowContext(ctx, selectArticle, id)
	var i Article
	err := row.Scan(&i.ID, &i.Name, &i.Content)
	return i, err
}

const selectArticleByName = `-- name: GetArticleByName :one
SELECT id, name, content FROM articles
WHERE name = ? LIMIT 1
`

func (q *Queries) SelectArticleByName(ctx context.Context, name string) (Article, error) {
	row := q.db.QueryRowContext(ctx, selectArticleByName, name)
	var i Article
	err := row.Scan(&i.ID, &i.Name, &i.Content)
	return i, err
}

const updateArticle = `-- name: UpdateArticle :exec
UPDATE articles
set name = ?,
    content = ?
WHERE id = ?
`

type UpdateArticleParams struct {
	Name    string
	Content string
	ID      int64
}

func (q *Queries) UpdateArticle(ctx context.Context, arg UpdateArticleParams) error {
	_, err := q.db.ExecContext(ctx, updateArticle, arg.Name, arg.Content, arg.ID)
	return err
}
